# -*- coding: utf-8 -*-
import numpy as np

def mutateSeq(seq, p = 0.01):
    pr = {'A': [1 - p, p / 3, p / 3, p / 3], 'C': [p / 3, 1 - p, p / 3, p / 3], 'G': [p / 3, p / 3, 1 - p, p / 3], 'T': [p / 3, p / 3, p / 3, 1 - p]}
    res = seq
    for i in range(len(seq)):
        res = np.random.choice(['A', 'C', 'G', 'T'], p = pr[seq[i]])
    return res
    
def alphaBeta(seq0, nSeq = 1, alpha = 1, beta = 1, p = 0.01):
    seqs = [mutateSeq(seq0, p)]
    for i in range(nSeq - 1):
        r = np.random.rand() * (1 + i * alpha + beta)
        if r < 1:
            seqs.append(mutateSeq(seqs[i], p))
        elif r < 1 + beta:
            seqs.append(mutateSeq(seq0, p))
        else:
            seqs.append(mutateSeq(np.random.randint(i), p))
    return seqs

def poisson(n = 1, lda = 1):
    s = 0
    arr = []
    for i in range(n):
        s += np.random.poisson(lda)
        arr.append(s)
    return arr

halflife_of_memory_cell_no_infection = 402
cell_cycle_of_germinal_center_cell_under_infection = 4 / 24
capacity_of_memory_cell_no_infection = 400000
capacity_of_germinal_center_cell_under_infection = 400000
proportion_of_germinal_center_cell_becoming_plasma_cell_per_cell_cycle = 0.25
proportion_of_germinal_center_cell_becoming_memory_cell_per_cell_cycle = 0.01

birth_rate_no_infection = 0
death_rate_with_nonsense_muatation = 1000
death_rate_of_germinal_center_cell_no_infection = 1000
death_rate_of_memory_cell_no_infection = 1.0 / halflife_of_memory_cell_no_infection
occupancy_factor_on_death_rate_no_infection = 0
birth_rate_of_germinal_center_cell_under_infection = 1 / cell_cycle_of_germinal_center_cell_under_infection
rate_of_germinal_center_cell_becoming_plasma_cell = birth_rate_of_germinal_center_cell_under_infection * proportion_of_germinal_center_cell_becoming_plasma_cell_per_cell_cycle
affinity_factor_on_death_rate_of_germinal_center_cell_under_infection = (1 - proportion_of_germinal_center_cell_becoming_plasma_cell_per_cell_cycle - proportion_of_germinal_center_cell_becoming_memory_cell_per_cell_cycle) * birth_rate_of_germinal_center_cell_under_infection / capacity_of_germinal_center_cell_under_infection
blosum_score_factor_on_log_affinity_for_selection = 0.025
blosum_score_factor_on_log_affinity_for_activation = 0.5 * blosum_score_factor_on_log_affinity_for_selection
total_affinity_threshold_for_cure_over_capacity = np.exp(20 * -15 * blosum_score_factor_on_log_affinity_for_selection)
regular_mutation_rate_per_basepair_per_generation = 2.7e-9
hypermutation_rate_per_basepair_per_generation = 0.1e-2
rate_germinal_center_cell_becoming_memory_cell = birth_rate_of_germinal_center_cell_under_infection * proportion_of_germinal_center_cell_becoming_memory_cell_per_cell_cycle
cdr1_start = 30
cdr1_end = 35
cdr2_start = 49
cdr2_end = 65
cdr3_start = 97
cdr3_end = 114
non_cdr_region_affinity_factor_modifier = 1 / 3
affinity_factor_on_rate_memory_cell_becoming_germinal_center_cell = 0.01 * np.exp(32 * 15 * blosum_score_factor_on_log_affinity_for_activation)
total_affinity_threshold_for_cure = capacity_of_germinal_center_cell_under_infection * total_affinity_threshold_for_cure_over_capacity
#starting_dna_sequence = "GAGGTGCAGCTGGTGGAGTCTGGGGGAGGCTTGGTCCAGCCTGGGGGGTCCCTGAGACTCTCCTGTGCAGCCTCTGGATTCAGCTTTCGTAGTTATTGGATGACCTGGGTCCGCCAGGCTCCAGGGAAGGGGCTGGAGTGGGTGGCCAACATATACCAAGATGGAAGTGAGCGACTTTATGGGGACTCTGTGAAGGGCCGATTCACCATCTCCAGAGACAACGCCAAGAACTCACTGTTTCTCCAAATGAACAGCCTGAGAGTCGAGGACACGGCTGTGTACTACTGTGCGAGGCGAGCGAGCTACGGTGATTACGCGGTCCAAGTTAACCCCTGGTTCGACCCCTGGGGCCAGGGAACCCTGGTCACCGTCTCCTCA"
starting_dna_sequence = "CAGGTGCAGCTGCAGGAGTCGGGCCCAGGACTGGTGAAGCCTTCACAGACCCTGTCCCTCACCTGCACTGTCTCTGGTGGCTCCATCAGCAGTGGTGGTTACTACTGGAGCTGGATCCGCCAGCACCCAGGGAAGGGCCTGGAGTGGATTGGGTACATCTATTACAGTGGGAGCACCTACTACAACCCGTCCCTCAAGAGTCGAGTTACCATATCAGTAGACACGTCTAAGAACCAGTTCTCCCTGAAGCTGAGCTCTGTGACTGCCGCGGACACGGCCGTGTATTACTGTGCGAGAGCGCGCGTCAATAGGGATATTGCGTACGGCAACTGGTTCGACCCCTGGGGCCAGGGGACCCTGGTCACCGTCTCCTCA"
time_interval_for_logging_with_infection = 0.1
time_interval_for_logging_no_infection = 20
phylogenetic_tree_taxon_sample_size = 200
number_of_infection_targets = 56
#target_sequences = alphaBeta(starting_dna_sequence, number_of_infection_targets, alpha = 1, beta = 1, p = 0.01)
#condition_switch_time = poisson(number_of_infection_targets, lda = 100)
target_sequences = [
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISSGGYYWSWIRQHPGKGLEWIGYIYYSGSTYYNPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRDIAYGNWFDPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISCWWVPWSWIRQHPGKGLEWWWCHCGWCNVXXNIXFKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNREXAYGNWFZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWWXXWSWIRQHPGKGLEWXGYVYYSGSDYYDPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKVNKEVVYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWWABWSWIRQHPGKGLEWTBYVYYSGSDYYDXSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKINKEVVYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWWGXWSWIRQHPGKGLEWTGYVYYSGSDYYDXSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKVNKEVVYGNWFEQWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWCPPWSWIRQHPGKGLEWWWCHCAWXBTXXBISLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRELAYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWCPPWSWIRQHPGKGLEWWWCHCZWYZVXXBISFKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRELAYGNXFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWWAXWSWIRQHPGKGLEWAGYVYYSGTDYYDBSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKINKEVVYGBWFEZWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWWPKWSWIRQHPGKGLEWSXHVYYSGSDYYDXSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKVNKEVVYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWCPPWSWIRQHPGKGLEWWWCHCCWXBVXYBXSYKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRELAYGNWFZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWLPPWSWIRQHPGKGLEWWWCHCEWLHVXXXIXYKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRELAYGNWFZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWLWCGWSWIRQHPGKGLEWKXYVYYSGSQFYDASLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKLNKEVVYGNWFZLWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWCWCGWSWIRQHPGKGLEWCRWVYYXXSDYYDIXLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKINKEVVYGDWFEQWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWXYXYWSWIRQHPGKGLEWTGYVYYSGSDYYDPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKEVVYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWVPPWSWIRQHPGKGLEWWWCNCCWFBTXXXLSFKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRELAYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWYYXDWSWIRQHPGKGLEWTGYVYYSGSDYYBPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKLNKEVVYGNWFZKWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWCPPWSWIRQHPGKGLEWWWCHCCYIBVXXBXSYKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRELAYGNWFZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWCPPWSWIRQHPGKGLEWWWCHCCYVBTXXBXSFKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRELAYGNWYZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWFWDGWSWIRQHPGKGLEWXKWVYYSGSDYYDXSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKINKZVVYGNWFEQWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWCPPWSWIRQHPGKGLEWWWCHCCQIBTXXBXSFKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRELAYGNWFZGWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWPWGDWSWIRQHPGKGLEWXGYVHYSRSDYYDPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKXNKZVVYRNWFEPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWCPDWSWIRQHPGKGLEWWWCHCCWIDWXXBXXYKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRZLAYRNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWYWGNWSWIRQHPGKGLEWGCXLYYSGSDYYDPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCIKVKIDKELVYGDWFZVWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWCPPWSWIRQHPGKGLEWWWCHCCWVWWNEGLXBKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCGXXRXXRDLAYGNWYXAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWFWBGWSWIRQHPGKGLEWTGYLYYSGSDYYDASLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCIKVKXNKELVYGNWFETWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWCWCGWSWIRQHPGKGLEWBGYLYYSGSDYYBFSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCIKVCIBKEMVYGBWFETWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWHPPWSWIRQHPGKGLEWWWCHCCWRBCXXXXSFKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRSLAYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWBYXYWSWIRQHPGKGLEWTGYVYYSGSDYYBPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKEVVYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWWHPPWSWIRQHPGKGLEWWWCHCCWRBLXXXXSFKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCARARVNRZLAYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISPPYGDWSWIRQHPGKGLEWPGKVYYSRSDYYDDSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCIKVKXNKYVVYRNWFEKWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISHPYGDWSWIRQHPGKGLEWPGBVYYSRSDYYDBSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKINKZVVYRNWFEKWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISHPYGDWSWIRQHPGKGLEWPPHCYYSRSDYYDBSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKXNKFVVYRNWFEZWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISHPYGDWSWIRQHPGKGLEWPGHVYYSRSDYYDPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCIKVKINBXVVYRNWFEKWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWXXAYWSWIRQHPGKGLEWPGYVYYSGSDYYDPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKEVVYGNWFEPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISLPYGDWSWIRQHPGKGLEWPGHVYYSRSDYYDDSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKLBKIVVYRNWFEKWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISHPYGDWSWIRQHPGKGLEWPGHVYYSRSDYFDDSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKXNKZVVYRNWFEKWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISHPYGDWSWIRQHPGKGLEWPGHVYYSHSDYYDDSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCIKVKXNKZVVYRNWFEKWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWEHGYWSWIRQHPGKGLEWXGYVYYSGSDYYDPSCKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKEVVYGNWFEPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWBIMYWSWIRQHPGKGLEWLGFVYYSGSDYYBPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKZVVYGNWFZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWPIFYWSWIRQHPGKGLEWLGYVYYSGSBYYBPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKZIVYGNWFZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISYZIMYWSWIRQHPGKGLEWLGYVYYSASDYYBPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKEIVYGNWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISYPIMYWSWIRQHPGKGLEWSGYVYYSGSDYYBPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKEVVYGBWFEAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISZSZYYWSWIRQHPGKGLEWTDYVYYSGIDYYTPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKEVVYDYWFEPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISBBGYYWSWIRQHPGKGLEWTDYVYYSGIDYYYPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMTKEVVYDYWFZPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISEBAYYWSWIRQHPGKGLEWTDYVYYSGVDYYEPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKEVVYDYWFEPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISWDIPYWSWIRQHPGKGLEWLGYVYYSASDYYBPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKZVVYGNWFZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISFKIMYWSWIRQHPGKGLEWLGYVYYSGSDYYDPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKWKMBKZVYYGNWFZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISYEIMWWSWIRQHPGKGLEWLGFVYYSGSDYYBPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMNKZAVYGNWFZAWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISDDGYYWSWIRQHPGKGLEWTDYVYYSGIDYYEPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKMKMAKZTVYDYWFZPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISEBFYYWSWIRQHPGKGLEWTDYVYYSGVDYYCPSIKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMBKEVVYDYWLEPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISZDPYYWSWIRQHPGKGLEWTDYVYYSGIDYYBPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMRKEVVYDHWFEPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISDDDYFWSWIRQHPGKGLEWTDYVYYSGIDYYWPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMTKZVVYDYWFZPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISDDRYYWSWIRQHPGKGLEWTDYIYYSGIDYYKPSLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMSKZVVYDYWFZPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISDDGYYWSWIRQHPGKGLEWTDYIFYSGITYYVPXLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMSKEVIYDHWFZPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISDDGYYWSWIRQHPGKGLEWCDYXFYSGIDYYSPSCKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMSKEVVYDYWFEPWGQGTLVTVSS',
'QVQLQESGPGLVKPSQTLSLTCTVSGGSISEDFYYWSWIRQHPGKGLEWTDYVWYTGIDYYXPXLKSRVTISVDTSKNQFSLKLSSVTAADTAVYYCVKVKMVKXVVXDYWFZPWGQGTLVTVSS'
]
nbreakouts = [2, 11, 11, 3, 3, 3, 4, 1, 4, 6, 2, 6];
condition_switch_time = [int(365 * (i + (j + 1) / nbreakouts[i])) for i in range(len(nbreakouts)) for j in range(nbreakouts[i])]
print("%.6e" % birth_rate_no_infection)
print("%.6e" % death_rate_with_nonsense_muatation)
print("%.6e" % death_rate_of_germinal_center_cell_no_infection)
print("%.6e" % death_rate_of_memory_cell_no_infection)
print("%.6e" % occupancy_factor_on_death_rate_no_infection)
print("%.6e" % birth_rate_of_germinal_center_cell_under_infection)
print("%.6e" % rate_of_germinal_center_cell_becoming_plasma_cell)
print("%.6e" % affinity_factor_on_death_rate_of_germinal_center_cell_under_infection)
print("%.6e" % blosum_score_factor_on_log_affinity_for_selection)
print("%.6e" % blosum_score_factor_on_log_affinity_for_activation)
print("%.6e" % regular_mutation_rate_per_basepair_per_generation)
print("%.6e" % hypermutation_rate_per_basepair_per_generation)
print("%.6e" % rate_germinal_center_cell_becoming_memory_cell)
print("%.6e" % affinity_factor_on_rate_memory_cell_becoming_germinal_center_cell)
print("%.6e" % total_affinity_threshold_for_cure)
print(starting_dna_sequence)
print("%.6e" % time_interval_for_logging_with_infection)
print("%.6e" % time_interval_for_logging_no_infection)
print(cdr1_start)
print(cdr1_end)
print(cdr2_start)
print(cdr2_end)
print(cdr3_start)
print(cdr3_end)
print("%.6e" % non_cdr_region_affinity_factor_modifier)
print(phylogenetic_tree_taxon_sample_size)
print(number_of_infection_targets)
for i in range(number_of_infection_targets):
    print(target_sequences[i])
    print(condition_switch_time[i])
